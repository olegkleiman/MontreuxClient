import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        //versionCode getVersionCodeFromManifest()
        applicationId "com.example.montreuxclient"
        minSdkVersion 16
        targetSdkVersion 19

        ndk {
            moduleName "libfastcvUtils"
            abiFilters "armeabi"
            ldLibs "EGL", "GLESv3", "dl", "log"
        }

        sourceSets{
            main {
                jniLibs.srcDir 'src/main/libs' //set .so files location to libs
                jni.srcDirs = [] // This prevents the auto generation of Android.mk
                //jni.srcDirs 'src/jni'
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile project(':microsoftazurestorage')
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.google.code.gson:gson:2.2.2'
    compile 'com.google.guava:guava:18.0'
    compile files('libs/microsoft-windowsazure-api-0.1.2.jar')
    compile files('libs/mobileservices-1.1.5.jar')
    compile files('libs/alljoyn.jar')
    compile files('libs/alljoyn_about.jar')
}


task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
    //def ndkDir = android.plugin.ndkFolder //'D:\\android-ndk-r10d'
    //println( project.getPlugins().getPlugin('android').getProperties() )
    def ndkDir = 'D:\\android-ndk-r10d'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        println "Using NDK from $ndkDir"
        commandLine "$ndkDir\\ndk-build.cmd",
                '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors()
               // 'NDK_APPLICATION_MK', 'src/main/jni/Application.mk'
               // 'all',
               // '-d',
               // 'NDK_DEBUG=1'
    } else {
        commandLine "$ndkDir\\ndk-build",
                '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                //'all',
                '-d',
                'NDK_DEBUG=1'
    }
}

task cleanNative(type: Exec, description: 'Clean JNI object files') {
    def ndkDir = 'D:\\android-ndk-r10d'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "$ndkDir/ndk-build.cmd",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    } else {
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }
}

clean.dependsOn 'cleanNative'


//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn buildNative
//}